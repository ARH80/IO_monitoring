Index: src/tensorflow_apps/main.ipynd.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tensorflow_apps/main.ipynd.ipynb b/src/tensorflow_apps/main.ipynd.ipynb
new file mode 100644
--- /dev/null	(date 1675440287987)
+++ b/src/tensorflow_apps/main.ipynd.ipynb	(date 1675440287987)
@@ -0,0 +1,211 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 61,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "import matplotlib.pyplot as plt\n",
+    "import seaborn as sns\n",
+    "import pandas as pd\n",
+    "import numpy as np\n",
+    "\n",
+    "import sys\n",
+    "\n",
+    "from collections import Counter\n",
+    "\n",
+    "\n",
+    "class BLK:\n",
+    "\n",
+    "    def __init__(self, directory):\n",
+    "        self.directory = directory\n",
+    "        self.df = None\n",
+    "\n",
+    "        with open(F'{directory}/parsed_trace.txt', 'r') as f:\n",
+    "            self.lines = f.readlines()\n",
+    "\n",
+    "        copy_list = []\n",
+    "        for line in self.lines:\n",
+    "            if line.startswith('CPU'):\n",
+    "                break\n",
+    "\n",
+    "            copy_list.append(line)\n",
+    "\n",
+    "        self.lines = copy_list\n",
+    "        last = self.lines[-1]\n",
+    "        last = float(last.split()[3])\n",
+    "\n",
+    "        self.time_scope_size = int(last // 100)\n",
+    "        self.time_scope_size = max(self.time_scope_size, 1)\n",
+    "        self.address_scope_size = 25 * 1e6\n",
+    "\n",
+    "    def get_features_dataframe(self):\n",
+    "        def parser(record):\n",
+    "            tokens = record.split()\n",
+    "            result = {\n",
+    "                'timestamp': float(tokens[3]),\n",
+    "                'time_scope': float(tokens[3]) // self.time_scope_size,\n",
+    "                'cid': int(tokens[1]),\n",
+    "                'sid': int(tokens[2]),\n",
+    "                'pid': int(tokens[4]),\n",
+    "                'action': tokens[5],\n",
+    "                'rw': tokens[6],\n",
+    "                'rw_spec': 'R' if 'R' in tokens[6] else 'W' if 'W' in tokens[6] else 'N',\n",
+    "                'start_address': int(tokens[7])\n",
+    "            }\n",
+    "\n",
+    "            result.update({'n_sectors': int(tokens[9]) if '+' in tokens else 1})\n",
+    "            result.update({'size': result['n_sectors'] * 512})\n",
+    "            result.update({'end_address': result['start_address'] + result['size']})\n",
+    "\n",
+    "            result.update({\n",
+    "                'scope_start_address': int(result['start_address'] // self.address_scope_size),\n",
+    "                'scope_end_address': int(result['start_address'] // self.address_scope_size)\n",
+    "            })\n",
+    "\n",
+    "            return result\n",
+    "\n",
+    "        df = pd.DataFrame([parser(x) for x in self.lines])\n",
+    "        self.df = df[df.rw_spec != 'N']\n",
+    "\n",
+    "    def pie_plot(self):\n",
+    "        palette_color = sns.color_palette('bright')\n",
+    "\n",
+    "        _ = plt.figure()\n",
+    "        plt.pie(\n",
+    "            [self.df[self.df.rw_spec == 'R'].shape[0], self.df[self.df.rw_spec == 'W'].shape[0]],\n",
+    "            labels=['Read', 'Write'],\n",
+    "            colors=palette_color,\n",
+    "            autopct='%.0f%%')\n",
+    "\n",
+    "        plt.title('Pie chart.')\n",
+    "        plt.savefig(F'{self.directory}/pie')\n",
+    "\n",
+    "    def density_on_size(self):\n",
+    "        _ = plt.figure()\n",
+    "        self.df.plot(kind='hist', column=['size'], by='rw_spec', bins=50)\n",
+    "        plt.savefig(F'{self.directory}/density_on_size.png')\n",
+    "\n",
+    "    def rw_intensive_plot(self):\n",
+    "        def count_R(group):\n",
+    "            return group[group == 'R'].shape[0]\n",
+    "\n",
+    "        def count_W(group):\n",
+    "            return group[group == 'W'].shape[0]\n",
+    "\n",
+    "        df = self.df.groupby(['time_scope']).agg(\n",
+    "            r_count=('rw_spec', count_R), w_count=('rw_spec', count_W))\n",
+    "\n",
+    "        df['WI'] = df[['r_count', 'w_count']].apply(\n",
+    "            lambda row: row[0] < row[1], axis=1).astype(int)\n",
+    "\n",
+    "        df['RI'] = df[['r_count', 'w_count']].apply(\n",
+    "            lambda row: row[1] < row[0], axis=1).astype(int)\n",
+    "\n",
+    "        _ = plt.figure()\n",
+    "        df[['WI', 'RI']].plot(kind='bar')\n",
+    "        plt.title('Read or Write intensive')\n",
+    "        plt.savefig(F'{self.directory}/rw_intensive.png')\n",
+    "\n",
+    "    def scope_frequency(self):\n",
+    "        c = Counter()\n",
+    "        _ = self.df[['scope_start_address', 'scope_end_address']].apply(\n",
+    "            lambda row: c.update(list(range(row[0], row[1] + 1))), axis=1)\n",
+    "\n",
+    "        scopes, counts = zip(*c.items())\n",
+    "\n",
+    "        _ = plt.figure()\n",
+    "        plt.bar(scopes, counts)\n",
+    "        plt.title('Address Freq.s')\n",
+    "        plt.savefig(F'{self.directory}/address_frequency.png')\n",
+    "\n",
+    "    def hot_and_cold_scopes(self):\n",
+    "\n",
+    "        time_scopes = self.df.time_scope.tolist()\n",
+    "        counters = {s: Counter() for s in time_scopes}\n",
+    "\n",
+    "        df = self.df.astype({\n",
+    "            'scope_start_address': int, 'time_scope': int, 'scope_end_address': int,\n",
+    "        })\n",
+    "\n",
+    "        start_address = df['scope_start_address'].min()\n",
+    "        start_time = df['time_scope'].min()\n",
+    "        end_time = df['time_scope'].max()\n",
+    "        end_address = df['scope_end_address'].max()\n",
+    "\n",
+    "        counters = np.zeros((end_address - start_address + 1, end_time - start_time + 1))\n",
+    "\n",
+    "        def update(row):\n",
+    "            for x in range(row[0], row[1] + 1):\n",
+    "                counters[x - start_address, row[2] - start_time] += 1\n",
+    "\n",
+    "        _ = df[['scope_start_address', 'scope_end_address', 'time_scope']].apply(lambda row: update(row), axis=1)\n",
+    "\n",
+    "        _ = plt.figure()\n",
+    "        sns.heatmap(np.log(counters + 1), cmap=\"crest\")\n",
+    "        plt.title('Hot and Cold scopes')\n",
+    "        plt.xlabel('time_scopes')\n",
+    "        plt.ylabel('address_scope')\n",
+    "        plt.show()\n",
+    "        # plt.savefig(F'{self.directory}/hot_and_cold_scopes.png')\n",
+    "\n",
+    "\n",
+    "blk = BLK('/home/alireza/PycharmProjects/IO_monitoring/src/tensorflow_apps/keras-classification')\n",
+    "blk.get_features_dataframe()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 62,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Figure size 640x480 with 2 Axes>",
+      "image/png": "\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "blk.hot_and_cold_scopes()"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   }
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 2
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython2",
+   "version": "2.7.6"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 0
+}
